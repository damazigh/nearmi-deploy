apiVersion: v1
kind: Namespace
metadata:
  name: gitlab-runner
---
apiVersion: v1
data:
  REGISTER_NON_INTERACTIVE: 'true'
  REGISTER_LOCKED: 'false'
  CI_SERVER_URL: 'https://gitlab.com/ci'
  METRICS_SERVER: '0.0.0.0:9100'
  RUNNER_REQUEST_CONCURRENCY: '1'
  RUNNER_EXECUTOR: 'kubernetes'
  KUBERNETES_NAMESPACE: 'gitlab-runner'
  KUBERNETES_PRIVILEGED: 'true'
  KUBERNETES_CPU_REQUEST: '250m'
  KUBERNETES_MEMORY_REQUEST: '256Mi'
  KUBERNETES_CPU_LIMIT: '1'
  KUBERNETES_MEMORY_LIMIT: '512Mi'
  KUBERNETES_SERVICE_CPU_REQUEST: '150m'
  KUBERNETES_SERVICE_MEMORY_REQUEST: '256Mi'
  KUBERNETES_SERVICE_CPU_LIMIT: '1'
  KUBERNETES_SERVICE_MEMORY_LIMIT: '1Gi'
  KUBERNETES_HELPER_CPU_REQUEST: '150m'
  KUBERNETES_HELPER_MEMORY_REQUEST: '100Mi'
  KUBERNETES_HELPER_CPU_LIMIT: '500m'
  KUBERNETES_HELPER_MEMORY_LIMIT: '200Mi'
  KUBERNETES_PULL_POLICY: 'if-not-present'
  KUBERNETES_TERMINATIONGRACEPERIODSECONDS: '10'
  KUBERNETES_POLL_INTERVAL: '5'
  KUBERNETES_POLL_TIMEOUT: '360'

kind: ConfigMap
metadata:
  labels:
    app: gitlab-ci-runner
  name: gitlab-ci-runner-cm
  namespace: gitlab-runner
---
apiVersion: v1
data:
  run.sh: |
    #!/bin/bash
    unregister() {
        kill %1
        echo "Unregistering runner ${RUNNER_NAME} ..."
        /usr/bin/gitlab-ci-multi-runner unregister -t "$(/usr/bin/gitlab-ci-multi-runner list 2>&1 | tail -n1 | awk '{print $4}' | cut -d'=' -f2)" -n ${RUNNER_NAME}
        exit $?
    }
    trap 'unregister' EXIT HUP INT QUIT PIPE TERM
    echo "Registering runner ${RUNNER_NAME} ..."
    mkdir /.gitlab-runner
    touch /.gitlab-runner/config.toml

    /usr/bin/gitlab-ci-multi-runner register -r ${GITLAB_CI_TOKEN}
    sed -i 's/^concurrent.*/concurrent = '"${RUNNER_REQUEST_CONCURRENCY}"'/' /home/gitlab-runner/.gitlab-runner/config.toml
    echo "Starting runner ${RUNNER_NAME} ..."
    /usr/bin/gitlab-ci-multi-runner run -n ${RUNNER_NAME} &
    wait
kind: ConfigMap
metadata:
  labels:
    app: gitlab-ci-runner
  name: gitlab-ci-runner-scripts
  namespace: gitlab-runner
---
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-ci-token
  namespace: gitlab-runner
  labels:
    app: gitlab-ci-runner
data:
  GITLAB_CI_TOKEN: V1k1bllTVzkxUmh6TnEtS2lMWXgK
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab-runner-admin
  namespace: gitlab-runner
---
apiVersion: rbac.authorization.k8s.io/v1
kind: 'ClusterRole'
metadata:
  name: gitlab-runner-admin
  namespace: gitlabci
rules:
  - apiGroups: ['*']
    resources: ['*']
    verbs: ['*']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: 'ClusterRoleBinding'
metadata:
  name: gitlab-runner-admin
  namespace: gitlab-runner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: 'ClusterRole'
  name: gitlab-runner-admin
subjects:
  - kind: ServiceAccount
    name: gitlab-runner-admin
    namespace: gitlab-runner
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gitlab-ci-runner
  namespace: gitlab-runner
  labels:
    app: gitlab-ci-runner
spec:
  updateStrategy:
    type: RollingUpdate
  replicas: 1
  serviceName: gitlab-ci
  selector:
    matchLabels:
      app: gitlab-ci-runner
  template:
    metadata:
      labels:
        app: gitlab-ci-runner
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: 'kubernetes.io/hostname'
      serviceAccountName: gitlab-runner-admin
      securityContext:
        runAsNonRoot: false
      containers:
        - image: gitlab/gitlab-runner:alpine-v13.7.0
          name: gitlab-ci-runner
          command:
            - /scripts/run.sh
          envFrom:
            - configMapRef:
                name: gitlab-ci-runner-cm
            - secretRef:
                name: gitlab-ci-token
          env:
            - name: RUNNER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - containerPort: 9100
              name: http-metrics
              protocol: TCP
          volumeMounts:
            - name: gitlab-ci-runner-scripts
              mountPath: '/scripts'
              readOnly: true
            - name: conf
              mountPath: '/etc/gitlab-runner/certs'
      volumes:
        - name: conf
          hostPath:
            path: /mnt/conf
            type: Directory
        - name: gitlab-ci-runner-scripts
          configMap:
            name: gitlab-ci-runner-scripts
            items:
              - key: run.sh
                path: run.sh
                mode: 0755
      restartPolicy: Always
